#!/bin/bash

#SBATCH --job-name=cbtm_simple
#SBATCH --output=/home/ehghaghi/scratch/ehghaghi/inference/run_logs/%x_%j.out
#SBATCH --error=/home/ehghaghi/scratch/ehghaghi/inference/run_logs/%x_%j.err
#SBATCH --partition=gpubase_l40s_b3
#SBATCH --gres=gpu:l40s:2
#SBATCH --cpus-per-task=4
#SBATCH --mem=128GB
#SBATCH --account=aip-craffel
#SBATCH --time=23:00:00

echo "Job ${SLURM_JOB_NAME} (${SLURM_JOB_ID}) started at $(date)"
echo "Running on node: $(hostname)"
echo "GPU resources: $CUDA_VISIBLE_DEVICES"

# Load modules and activate environment
module load cuda/12.6
module load gcc arrow/19.0.1 python/3.11
source /home/ehghaghi/projects/aip-craffel/ehghaghi/c-btm-distillation/uv-x86_64-unknown-linux-gnu/distill_env/bin/activate

# Export cache dirs
export SCRATCH="/home/ehghaghi/scratch/ehghaghi"
export HUGGINGFACE_HUB_CACHE=$SCRATCH/.cache

# =============================================================================
# SIMPLE CONFIGURATION
# =============================================================================

# Model paths
VECTORIZER_PATH="$SCRATCH/clusters/allenai/tulu-3-sft-mixture/8/tfidf.pkl"
CLUSTER_CENTERS_PATH="$SCRATCH/clusters/allenai/tulu-3-sft-mixture/8/kmeans.pkl"
EXPERT_MODELS_DIR="$SCRATCH/distillation_results"

# Python script
CBTM_SCRIPT="ensemble.py"

# Test context - MODIFY THIS FOR YOUR EXPERIMENT
TEST_CONTEXT="\n\nJokaisesta asiakkaasta tallennetaan asiakasnumero (yksik√§sitteinen), nimi, osoite ja s√§hk√∂postiosoite. Yhdell√§ asiakkaalla voi olla monta vakuutusta ja samalla vakuutuksella voi olla monta haltijaa (esim. pariskunta ottaa yhteisen kotivakuutuksen). Vakuutuksista tallennetaan my√∂s vakuutusnumero (yksik√§sitteinen), vakuuksen tyyppi (esim. koti- tai autovakuutus) ja vuosimaksu.\nTietokantaan tallennetaan tieto vakuutuksiin liittyvist√§ (asiakkaalle l√§hetetyist√§) laskuista. N√§ist√§ laskuista tiedet√§√§n, mihin vakuutukseen ne liittyv√§t, viitenumero (yksik√§sitteinen), laskun p√§iv√§m√§√§r√§, er√§p√§iv√§, summa ja laskun tila (esim. maksamatta, maksettu tai mit√§t√∂ity). Tietokannassa s√§ilytet√§√§n my√∂s tietoa vanhoista laskuista, jotka on jo maksettu.\nLis√§ksi tietokantaan tallennetaan tieto vahinkotapauksista sek√§ niihin liittyvist√§ korvaushakemuksista. Jokainen ilmoitettu vahinkotapaus liittyy t√§sm√§lleen yhteen vakuutukseen. Vahinkotapauksista tallennetaan lis√§ksi vahinkonumero (yksik√§sitteinen), vahinkop√§iv√§, vahingon kuvaus ja vahinkoon liittyv√§t korvaushakemukset. Samaan vahinkotapaukseen voi liitty√§ useita korvaushakemuksia (esimerkiksi sairaus, josta tulee eri kuluja monta kertaa usean eri vuoden aikana). Samaan vahinkotapaukseen liittyv√§t korvaushakemukset erotetaan toisistaan antamalla niille oma numero. T√§m√§ numero on kuitenkin yksik√§sitteinen vain samaan vahinkotapaukseen liittyvill√§ hakemuksilla. Korvaushakemuksista tallennetaan my√∂s haettu korvaussumma, hakemuksen p√§iv√§m√§√§r√§ ja p√§√§t√∂s (korvattava summa)."

# Parameters
TEMPERATURE="0.1"
TOP_K="2"
MAX_TOKENS="1024"

# =============================================================================
# RUN C-BTM INFERENCE
# =============================================================================

echo "üß† C-BTM SPARSE ENSEMBLE INFERENCE"
echo "===================================="
echo "üìù Context: $TEST_CONTEXT"
echo "üå°Ô∏è Temperature: $TEMPERATURE"
echo "üîù Top-K Experts: $TOP_K"
echo "üéØ Max Tokens: $MAX_TOKENS"
echo ""

python3 "$CBTM_SCRIPT" \
    --vectorizer "$VECTORIZER_PATH" \
    --cluster-centers "$CLUSTER_CENTERS_PATH" \
    --expert-dir "$EXPERT_MODELS_DIR" \
    --context "$TEST_CONTEXT" \
    --temperature "$TEMPERATURE" \
    --top-k "$TOP_K" \
    --max-tokens "$MAX_TOKENS" \
    --generate

echo ""
echo "‚úÖ C-BTM inference complete!"
echo "Job finished at $(date)"